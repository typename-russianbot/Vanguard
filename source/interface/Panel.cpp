#include "../../includes/interface/Panel.h"

//& Resources
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: Panel(void)
//* @def: Constructor

Panel::Panel(const Vector2f size, const Vector2f pos, const Color color) : mBackground(size)
{
    mBackground.setOrigin(mBackground.getSize() / 2.f);
    mBackground.setPosition(pos);

    mBackground.setFillColor(color);
    mBackground.setOutlineColor(Black);
    mBackground.setOutlineThickness(4.5f);
    return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: ~Panel(void)
//* @def: Destructor

Panel::~Panel(void) { return; }
//////////////////////////////////////////////////////////////////////////////////////////////////

//& Functions
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: move(const Vector2f)
//* @def: moves the panel

void Panel::move(const Vector2f pos)
{
    //? @note: move background
    mBackground.move(pos);

    //? @note: move child drawables
    for (auto &[drawable, offset] : mChildren)
    {
        offset = offset + pos;
    }

    return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: resize(const Vector2f)
//* @def: resizes the panel

void Panel::resize(const Vector2f size)
{
    //? @note: resize background
    mBackground.setSize(size);

    return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: add(const Drawable&, const Vector2f)
//* @def: adds a new drawable to the panel

void Panel::add(Textbox *drawable, Vector2f offset)
{
    //? @note: push drawable to the back of the vector
    mChildren.push_back({drawable, offset});

    return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: visible(const bool)
//* @def: toggles panel visibility

void Panel::visible(const bool flag)
{
    //? @note: toggle visible
    if (flag)
        mVisible = flag;

    //? @note: toggle hidden
    else
        mVisible = flag;

    return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: isVisible(void)
//* @def: returns true if visible, false otherwise

const bool Panel::isVisible(void) const
{
    return mVisible;
}
//////////////////////////////////////////////////////////////////////////////////////////////////

//& Mutators
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setColor(const Color)
//* @def: sets background fill color

void Panel::setColor(const Color color)
{
    mBackground.setFillColor(color);
    return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setOutlineColor(const Color)
//* @def: sets background outline color

void Panel::setOutlineColor(const Color color)
{
    mBackground.setOutlineColor(color);
    return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setOutlineThickness(const float)
//* @def: set background outline thickness

void Panel::setOutlineThickness(const float thickness)
{
    mBackground.setOutlineThickness(thickness);
    return;
}
//////////////////////////////////////////////////////////////////////////////////////////////////

//& Accessors
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getColor(void)
//* @def: return background fill color

const Color Panel::getColor(void) const { return mBackground.getFillColor(); }
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getOutlineColor(void)
//* @def: return background outline color

const Color Panel::getOutlineColor(void) const { return mBackground.getOutlineColor(); }
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getOutlineThickness(void)
//* @def: return background outline thickness

const float Panel::getOutlineThickness(void) const { return mBackground.getOutlineThickness(); }
//////////////////////////////////////////////////////////////////////////////////////////////////
