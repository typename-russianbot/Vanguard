#include "../../includes/interface/Button.h"

//& Resources
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: Button()
//* @def: Constructor

Button::Button(const String text, const unsigned int size, const String font)
    : TextBox(text, size, font), mHighlightColor(Yellow), mOutlineColor(getOutlineColor())
{
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: Button(const Button&)
//* @def: Copy Constructor

Button::Button(const Button &) { return; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: ~Button(void)
//* @def: Destructor

Button::~Button(void) { return; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Public Functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: highlight(void)
//* @def: highlights button

void Button::highlight(void)
{
    if (isVisible())
    {
        mHighlighted = true;
        setOutlineColor(mHighlightColor);
    }

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: unhighlight(void)
//* @def: unhighlights button

void Button::unhighlight(void)
{
    if (isVisible())
    {
        mHighlighted = false;
        setOutlineColor(mOutlineColor);
    }

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: hover(const Vector2f)
//* @def:

void Button::hover(const Vector2f mousePos)
{
    if (contains(mousePos))
        highlight();
    else
        unhighlight();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public:
//* @def:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Mutators
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: isHighlighted(void)
//* @def: returns true if highlighted, false otherwise

const bool Button::isHighlighted(void) const
{
    if (mHighlighted)
        return true;

    return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setHighlightColor(const Color)
//* @def: sets highlight color of button

void Button::setHighlightColor(const Color color)
{
    mHighlightColor = color;
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: resetOutlineColor(const Color)
//* @def: resets outline color

void Button::resetOutlineColor(const Color color)
{
    mOutlineColor = color;
    setOutlineColor(color);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
