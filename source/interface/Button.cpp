#include "../../includes/interface/Button.h"

//& Resources
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: Button()
//* @def: Constructor

Button::Button(const String text, const unsigned int size, const String font)
    : Textbox(text, size, font), mHighlightColor(Yellow), mOutlineColor(getOutlineColor()), mHighlighted(false), mSelected(false)
{
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: Button(const Button&)
//* @def: Copy Constructor

Button::Button(const Button &) { return; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: ~Button(void)
//* @def: Destructor

Button::~Button(void) { return; }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: highlight(void)
//* @def: highlights button

void Button::highlight(const bool flag)
{
    //? @note: show button
    if (flag && isVisible())
    {
        mHighlighted = true;
        setOutlineColor(mHighlightColor);
    }
    else
    {
        mHighlighted = false;
        setOutlineColor(mOutlineColor);
    }

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TODO @public: select(const bool)
//* @def: selects button

void Button::select(const bool flag)
{
    // TODO - implementation required
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: hover(const Vector2f)
//* @def: highlights or unhighlights button, depending on 'contains' function return value

void Button::hover(const Vector2f mousePos)
{
    if (contains(mousePos))
        highlight(true);
    else
        highlight(false);

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: isHighlighted(void)
//* @def: returns true if highlighted, false otherwise

bool Button::isHighlighted(void)
{
    return mHighlighted;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: isSelected(void)
//* @def: returns true if selected, false otherwise

bool Button::isSelected(void)
{
    return mSelected;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Mutators
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setHighlightColor(const Color)
//* @def: set drawables highlight color

void Button::setHighlightColor(const Color color)
{
    mHighlightColor = color;
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
