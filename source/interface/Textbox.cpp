#include "../../includes/interface/Textbox.h"

//& Resources
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: TextBox(const Vector2f, const string)
//* @def: Constructor

Textbox::Textbox(const String text, const unsigned int size, const String font)
    : mVisible(true)
{
    //? @note: initialize font
    if (!mFont.loadFromFile(font))
        exit(1);

    //? @note: initialize text
    mText.setFont(mFont);
    mText.setString(text);

    mText.setCharacterSize(size);
    mText.setPosition(Vector2f{static_cast<float>(DISPLAY.width) / 2.f, static_cast<float>(DISPLAY.height) / 2.f});
    mText.setOrigin(mText.getLocalBounds().width / 2.f, mText.getLocalBounds().height / 1.5f);

    mText.setFillColor(Black);
    mText.setOutlineColor(Transparent);
    mText.setOutlineThickness(.4f);

    //? @note: initialize rectangle
    mRectangle.setSize(Vector2f{static_cast<float>(mText.getString().getSize() * mText.getCharacterSize()) * 1.5f, static_cast<float>(mText.getCharacterSize() * 1.75f)});
    mRectangle.setOrigin(mRectangle.getSize() / 2.f);
    mRectangle.setPosition(DISPLAY.width / 2.f, DISPLAY.height / 2.f);

    mRectangle.setFillColor(DarkGray);
    mRectangle.setOutlineColor(Black);
    mRectangle.setOutlineThickness(3.f);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: TextBox(const TextBox&)
//* @def: Copy Constructor

Textbox::Textbox(const Textbox &textbox)
    : mRectangle(textbox.mRectangle), mFont(textbox.mFont), mText(textbox.mText), mVisible(textbox.mVisible)
{
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: ~TextBox(void)
//* @def: Destructor

Textbox::~Textbox(void)
{
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: move(const Vector2f)
//* @def: moves textbox

void Textbox::move(const Vector2f offset)
{
    //? @note: move all components of textbox
    mText.move(offset);
    mRectangle.move(offset);

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: resize(const unsigned int)
//* @def: resizes textbox

void Textbox::resize(const unsigned int size)
{
    //? @note: resize & reset origin of our text
    mText.setCharacterSize(size);
    mText.setOrigin(mText.getLocalBounds().width / 2.f, mText.getLocalBounds().height / 1.25f);

    //? @note: resize & reset origin of our rectangle
    mRectangle.setSize(Vector2f{static_cast<float>(mText.getString().getSize() * mText.getCharacterSize()) * 1.5f, static_cast<float>(mText.getCharacterSize() * 1.75f)});
    mRectangle.setOrigin(Vector2f{mRectangle.getSize().x / 2.f, mRectangle.getSize().y / 2.f});

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: contains(const Vector2f)
//* @def: returns true if mousePos is within textbox, false otherwise

bool Textbox::contains(const Vector2f mousePos)
{
    if (mRectangle.getGlobalBounds().contains(mousePos) && mVisible)
        return true;

    return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: visible(const bool)
//* @def: sets the visibility of the drawable, depending on the flag

void Textbox::visible(const bool flag)
{
    //? @note: show drawable
    if (flag)
        mVisible = flag;

    //? @note: hide drawable
    else
        mVisible = flag;

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: isVisible(void)
//* @def: returns the current visibility state

bool Textbox::isVisible(void)
{
    return mVisible;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Mutators
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setText(const String)
//* @def: sets text

void Textbox::setText(const String text)
{
    mText.setString(text);
    resize(mText.getCharacterSize());

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setPosition(const Vector2f)
//* @def: sets drawables position

void Textbox::setPosition(const Vector2f pos)
{
    mRectangle.setPosition(pos);
    mText.setPosition(pos);

    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setFillColor(const Color)
//* @def: sets rectangle color

void Textbox::setColor(const Color color)
{
    mRectangle.setFillColor(color);
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setOutlineColor(const color)
//* @def: sets rectangle outline color

void Textbox::setOutlineColor(const Color color)
{
    mRectangle.setOutlineColor(color);
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setTextColor(const color)
//* @def: sets text color

void Textbox::setTextColor(const Color color)
{
    mText.setFillColor(color);
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: setTextOutlineColor(const Color)
//* @def: sets text outline color

void Textbox::setTextOutlineColor(const Color color)
{
    mText.setOutlineColor(color);
    return;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//& Accessors
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getText(void)
//* @def: returns text of drawable

const String Textbox::getText(void) const
{
    return mText.getString();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getPosition(void)
//* @def: returns drawables position

const Vector2f Textbox::getPosition(void) const
{
    return mRectangle.getPosition();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getColor(void)
//* @def: returns rectangle fill color

const Color Textbox::getColor(void) const
{
    return mRectangle.getFillColor();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getOutlineColor(void)
//* @def: returns rectangle outline color

const Color Textbox::getOutlineColor(void) const
{
    return mRectangle.getOutlineColor();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getOutlineThickness(void)
//* @def: returns rectangle outline thickness

const float Textbox::getOutlineThickness(void) const
{
    return mRectangle.getOutlineThickness();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getTextColor(void)
//* @def: returns text fill color

const Color Textbox::getTextColor(void) const
{
    return mText.getFillColor();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getTextOutlineColor(void)
//* @def: returns text outline color

const Color Textbox::getTextOutlineColor(void) const
{
    return mText.getOutlineColor();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//* @public: getTextOutlineThickness(void)
//* @def: returns text outline thickness

const float Textbox::getTextOutlineThickness(void) const
{
    return mText.getOutlineThickness();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
